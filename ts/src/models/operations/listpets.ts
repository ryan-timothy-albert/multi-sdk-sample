/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type ListPetsRequest = {
  /**
   * How many items to return at one time (max 100)
   */
  limit?: number | undefined;
};

export type ListPetsResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * A paged array of pets
   */
  pets?: Array<components.Pet> | undefined;
  /**
   * unexpected error
   */
  error?: components.ErrorT | undefined;
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const ListPetsRequest$inboundSchema: z.ZodType<
  ListPetsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().int().optional(),
});

/** @internal */
export type ListPetsRequest$Outbound = {
  limit?: number | undefined;
};

/** @internal */
export const ListPetsRequest$outboundSchema: z.ZodType<
  ListPetsRequest$Outbound,
  z.ZodTypeDef,
  ListPetsRequest
> = z.object({
  limit: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPetsRequest$ {
  /** @deprecated use `ListPetsRequest$inboundSchema` instead. */
  export const inboundSchema = ListPetsRequest$inboundSchema;
  /** @deprecated use `ListPetsRequest$outboundSchema` instead. */
  export const outboundSchema = ListPetsRequest$outboundSchema;
  /** @deprecated use `ListPetsRequest$Outbound` instead. */
  export type Outbound = ListPetsRequest$Outbound;
}

/** @internal */
export const ListPetsResponse$inboundSchema: z.ZodType<
  ListPetsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  Pets: z.array(components.Pet$inboundSchema).optional(),
  Error: components.ErrorT$inboundSchema.optional(),
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Pets": "pets",
    "Error": "error",
    "Headers": "headers",
  });
});

/** @internal */
export type ListPetsResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  Pets?: Array<components.Pet$Outbound> | undefined;
  Error?: components.ErrorT$Outbound | undefined;
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const ListPetsResponse$outboundSchema: z.ZodType<
  ListPetsResponse$Outbound,
  z.ZodTypeDef,
  ListPetsResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  pets: z.array(components.Pet$outboundSchema).optional(),
  error: components.ErrorT$outboundSchema.optional(),
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    pets: "Pets",
    error: "Error",
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPetsResponse$ {
  /** @deprecated use `ListPetsResponse$inboundSchema` instead. */
  export const inboundSchema = ListPetsResponse$inboundSchema;
  /** @deprecated use `ListPetsResponse$outboundSchema` instead. */
  export const outboundSchema = ListPetsResponse$outboundSchema;
  /** @deprecated use `ListPetsResponse$Outbound` instead. */
  export type Outbound = ListPetsResponse$Outbound;
}
